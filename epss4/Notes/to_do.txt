This file describes things that will, should, or could be implemented in the code. They have to do with programming, not economics.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 (A) Next steps 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- gini: wage before or after tax? need to check and implement
- Calc medians of lifecycle statistics during simulation. In particular, median portfolio return.
- Instead of portfolio return (graphs) (and consumption?), calc 90th- 10th percentile or the like.
                         
- record and report stats for gross wages (important when def benefits) (in simulations and save_results)

- implement a check on lowest income shock gridpoint whether it is negative - discussion with Christian Zimmermann at Zilibotti's
        but do I actually need that or is it specified in logs?
- implement check if stockmarket also clears
- set_apmax conditions on bequests_to_newborn, which is default .true. even if we do not have survival risk. Should check and correct or impove.
- reading the data from calibration files goes wrong if there is no explanation in 'third column', without error message. Need to change that.
- if tau is different from 0.02 then can't write unformatted output, because the input path has tau0.02 and tau0.00 hard-coded. Should use tau_low and tau_high instead.
    See branch 80-tau012, where I implemented a hack for tau012, where it is treated as tau002  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 (B) To do
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- allow for borrowing only in bond while forbidding leverage in stock. This should help getting the portfolio shares more like in the data while still allowing agents to offset some of the tax.
     See 084-kappa_in_01, which didn't work for a reason I didn't understand.
- Euler errors are not saved to or read from simvars.unformatted, see simvars_class. I need to first write unformatted without reading, thus without experiments, for all calibrations.
- i) the calibration targets differ from the moments shown in the results (in equilibrium_short/_long.txt), because the former are excluding periods with an error and the latter are including them.
    That is not wrong, but confusing, because then sometimes the calibration converges but the reported moments differ from the targets (mostly r_f and equity premium). 
    This can be remedied by increasing aggregate grids until the errors disappear, so it is not bad to have this different reported moment as an indication that grids need to be increased. 
    I might leave it like this or improve.
  ii) the cev numbers in welfare_xxx.txt can differ from the cev calculated by hand from the welfare numbers in equilibrium_long.txt for the same reason:
        in equilibrium_long.txt they are with error periods, in cev calculation without, and the same if there are no error periods. 
        This can be even more confusing than the previous point, so I should report the ex_err in equilibrium_long.txt    
- write t_scrap into simvars, especially the unformatted, because when the old simvars are read to initialize, and the stats are calculated, 
    then it can happen that the 'new' t_scrap (i.e. in the new calib-file) is larger than the 'old' nt. Concretely, run_model:137 'K%name ='K' ; call K%calc_stats(simvars_old)' can fail.
- splines for value function and consumption in Euler equations / household solution? Maybe also to interpolate stocks and bonds?
- use the type tPolicies everywhere instead of redefining xgrid etc (Distribution, fun_excessbonds, save_results_mod, policyfunctions).
    -- started, but is not so easy: the newly defined xgrid etc have less dimensions. 
        Allocating tPolicies with extent 1 in that dimension introduces a lot of cumbersome notation with brackets like (:,:,1,:,:,:) .
        Instead, could have an extended derived type extra with less dimensions - but what happens to all the type-bound procedures?
        See my comment in policyfunctions:interpolate, and the correspondence on CLF
    -- could put the errors only in the 'normal' type and call later from there (and not have them in the smaller types)    
    -- in policyfunctions, remove app_min, instead calc for all ap (using the new type policies), and then address element zc=1 where needed.

- correct eigenvalue calc of stationary distribution (in module markov_station_distr, see also params_mod:CheckParams), check codes/Fortran/Bewley_by_Karibzhanov/source/toolbox   
- maybe remove apmax_factor from the calibration files, and put it as a parameter when creating the apmax for ms. It's not needed later (for GE)
- clean up files: merge rootfinders into one module rootfinder and tools (like linesearch, fdjac); merge the 3 markov*.f90 files and the twostate_exact.f90;
    merge tools like fun_kronprod.f90 and numrec_utils into utils. Clean up all the usage of these, e.g. of markov* in params_mod   
- If there is no risk, the mean shock code is used with zero risk. However, the distribution will still spread out a bit, because households will be set to 2 adjacient points in the 1st period,
    and in following periods will slowly spread out. This is not important for the application, it only shows up in the variance of lifecycle profiles in economies without risk.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 (C) Further ideas
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- rewrite the calibration_mod, so that it reads in the name of the associated param. This would greatly increase usability, because I only need
    to change the calibration files by adding or removing or changing params. However, also need an identifier for the associated target in the calibration file.
    Even better: put the end params at the beginning of each calibration file, and next to it the target. read them in like normal parameters, but then write the param name
    into a temporary character array, increase n_end_params by one, and read the target into a character array. finally, allocate two character arrays of size n_end_params, copy params and targets into them.
    No need for n_end_params in calibration file.
- give grids in run_model_mod SAVE, so that agg grid can be updated once in the beginning and not later?
- make params_mod readable by Matlab and read it in
- have an option to skip the mean shock equilibrium (use opt_initial_ms_guess for this)
- move value into policies
- make interpolateXgrid a (type-bound?) function
- make nx, n_eta, nz ... private in params_mod? nx should be relatively easy! 
    I think better: put into policies! But that might interfere when I define the type as a tuple of scalars and then use arrays of the type... but that's far into the future 
- have an aggregate grid for each z, coz mu and k change a lot with z (k coz depreciation, mu coz probabilities of high return tomorrow).
    This should help a lot to avoid the problem that either kappa is not found in hh solution, or mu hits bounds in simulation.
    But then remove if(rfp < rp(1)) in policyfunctions:calc_vars_tomorrow
- in household_solution, the loops for mu and k do not conform anymore to the ordering of the states, because I interchanged the outer loops so that
    OpenMP can work on the capital grid. So now the outermost loop does not work on the rightmost state anymore (which still is mu). Should change that, but I 
    think it's difficult, because need to correct indeces everywhere in the program.
- Instead of having tPolicies with allocatable components, make tPolicies a tuple (of scalars) and then define arrays of tPolicies. Should work much better, also for 
adding, interpolating, calling routines, having less dimensions. But have to think it through, not clear how interpolation and other type-bound procedures could be called.
- arithmetic operations on tPolicies? Maybe not needed.
- maybe allow for fractions in calibration files (e.g. 1/3). For this, in ReadCalib, put '(3(a,:))' (: being a stop rule), then scan for \ and make the 
    division, if \ is found. Hoever, this doesnt allow 1/theta directly. Also, prob need to remove the / in the separator lines.
- Move the Build* folders (i.e. the build configurations) to one folder bin. However, with managed make this doesn't seem allowed, see ->Properties->Fortran Build: Build directory. 
If I try to change this, I should first try it on a new copy (not even a branch, but a new clone or new repository), just to make sure...
- Make Distribution Phi a derived type, so that it can carry the grid over which it is defined. See my comments in krusell_smith_mod.f90. 
    Could delete xgrid_ms in run_model_mod and make local in SolveMeanshock. Could make interpolate_xgrid:InterpolateXgrid_Phi a type-bound procedure
- replace Intel's system(string) subroutine, which is a non-portable extension, with the F2008 execute_command_line(string),
    which is already supported by Gfortran. It is not yet supported by the Intel Fortran compiler. Don't forget to remove the use ifport
    See CLF post: http://comp.lang.fortran.narkive.com/Iua1GCiT/system-vs-execute-command-line   
- errors_mod: detailed_euler_errs not used at the moment!
- errors_mod: either initialize err%cons and err%asset with xp in first dimension, or save to file with explicit format. At the moment the
    files written to disk are difficult to read. Also, setting detailed_euler_errs=.true. should write to file, not to stdout, because it's too much for stdout.
- move "if (errs%not_converged) call errs%write2file(fvals, output_path)" 
  from meanshock_wrapper and main:internal_subroutine_krusellsmith())
  to save_results_mod. For this need to put fvals into err, make allocatable.
  This helps to make the procedures pure, and also more logical: all saving to file is done in save_results_mod
  See whether can clean up krusell_smith:get_krusellsmith and meanshock_equilib:ms_equilib_get; they are a bit messy because of
  the errs%not_converged (This should not be a prob once errs is passed as an object in the rootfinder... alternatively could overload the assignment operator) 
- in fun_eulerasset I do Taylor approx IFF xp<x(1,j+1). Should also do for upper bound? And also for consumption-Euler?!
- create derived types for  loms (has types coeffs and grids), prices (wages etc)?
- use simulate_economy also in mean_shock_mod? Not so easy, because want to save mean shock results in the first 'period' of simvars. 
    Maybe this becomes easier if the derived types are defined on scalar tuples.
- change depreciation to have its own dimension? affects probabilities, and ups_grid, ups_sigma
- maybe mod_demographics.f90?
- put the formatted write into the types. see save_results_mod.f90
- Call aggregate_grids_class just grids? And use aggregate_grids_class also for apgrid??
- lifecycles_mod with calculation of lifecycles, consistent both with mean shock and simulations
- for lifecycles, make 'sub'type with avg and std_dev, and record for all; maybe also avg_cond std_dev_cond (conditional on survival). 
    Also make a write statement similar to the aggregate stats.  put pop_frac in lifecycles
- in simulations, use a tLifecycle 'lc_t' to record in t, and define an operator (+) to add that to the lifecylce 
- Make type params and have a method that distributes the params to the objects that need them, e.g. policyfunctions. No more need for all the use statements
    Then I can have an allocatable type params in main, see how many runs we have (depends on experiment / number of calibs), then allocate and have a params
    for each, which I then pass by argument to start_solution, which has a scalar type params as input.
- Type results, which contains all the results we are interested in, can print them in formatted and unformatted way. This is helpful for e.g. the no AR economy to read in directly the values.
- Merge coefficients_class into laws_of_motion. Maybe class laws_of_motion which has a component coefficients_class. 
 - Copyleft: http://www.gnu.org/copyleft/gpl-howto.html
                